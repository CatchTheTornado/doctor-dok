'use client'
/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/vVUGACvQM0u
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import { Button } from "@/components/ui/button"
import { Label } from "@/components/ui/label"
import { Input } from "@/components/ui/input"
import { useForm } from "react-hook-form"
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from "zod"
import { PatientContext } from "@/contexts/patient-context"
import { use, useContext, useEffect, useState } from "react"
import { Patient, PatientRecord } from "@/data/client/models"
import { Credenza, CredenzaClose, CredenzaContent, CredenzaDescription, CredenzaFooter, CredenzaHeader, CredenzaTitle, CredenzaTrigger } from "./credenza"
import { JsonEditor } from 'json-edit-react'
import { useTheme } from "next-themes"
import { or } from "drizzle-orm"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@radix-ui/react-tabs"
import { useHookFormMask } from 'use-mask-input';

export function PatientEditPopup() {
  const patientContext = useContext(PatientContext);
  const { theme, systemTheme } = useTheme();
  const currentTheme = (theme === 'system' ? systemTheme : theme)
  const {
    register,
    handleSubmit,
    reset,
    setValue,
    formState: { errors },
  } = useForm({
    resolver: zodResolver(
      z.object({
        firstName: z.string().min(2, "First name is required"),
        lastName: z.string().min(2, "Last name is required"),
        dateOfBirth: z.string().date("Date of birth is required"),
        email: z.string().email("Invalid email address").optional(),
        json: z.string().optional(),
      }),
    ),
  })
  const registerWithMask = useHookFormMask(register);

  const defaultJsonData = {
    "Personal ID Number": "",
    "Address": "",
    "Gender": "M",
    "City": "",
    "Zip Code": ""        
  };
  const [jsonData, setJsonData] = useState(defaultJsonData);

  useEffect(() => {
      if(patientContext?.currentPatient && patientContext?.patientEditOpen && !patientContext?.addingNewPatient) {
        setJsonData(patientContext?.currentPatient.json);
        setValue('firstName', patientContext?.currentPatient.firstName);
        setValue('lastName', patientContext?.currentPatient.lastName);
        setValue('dateOfBirth', patientContext?.currentPatient.dateOfBirth as string);
        setValue('email', patientContext?.currentPatient.email);
      }
  }, [patientContext?.currentPatient, patientContext?.patientEditOpen]);

  const onSubmit = (data) => {
    let pr: Patient;
    if (patientContext?.currentPatient  && patientContext?.patientEditOpen && !patientContext?.addingNewPatient) {
      pr = new Patient(patientContext?.currentPatient);
      pr.json = jsonData;
      pr.firstName = data.firstName;
      pr.lastName = data.lastName;
      pr.dateOfBirth = data.dateOfBirth;
      pr.email = data.email;
      pr.updatedAt = new Date().toISOString();
    } else {
      pr = new Patient({
        firstName: data.firstName,
        lastName: data.lastName,
        dateOfBirth: data.dateOfBirth,
        email: data.email,
        json: JSON.stringify(jsonData),
        updatedAt: new Date().toISOString()
      });
    }
    patientContext?.updatePatient(pr);
    patientContext?.setPatientEditOpen(false);
    patientContext?.setAddingNewPatient(false);
    reset();
    setJsonData(defaultJsonData);
  }
  return (
    <Credenza open={patientContext?.patientEditOpen} onOpenChange={(e) => { patientContext?.setPatientEditOpen(e); if(!e) patientContext?.setAddingNewPatient(false); }}>
      <div>
      <Button variant="outline" className="absolute right-5 top-7" size="icon" onClick={(e) => {
        patientContext?.setAddingNewPatient(true);
        patientContext?.setPatientEditOpen(true);
      }}>
          <PlusIcon className="w-6 h-6" />
        </Button>
      </div>
      <CredenzaContent className="sm:max-w-[500px] bg-white dark:bg-zinc-950" side="top">
          <div className="p-4 overflow-y-scroll max-h-svh">
            <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
              <Tabs defaultValue="general">
                <TabsList className="grid w-full grid-cols-2">
                  <TabsTrigger value="general" className="dark:data-[state=active]:bg-zinc-900 data-[state=active]:bg-zinc-100">General</TabsTrigger>
                  <TabsTrigger value="additional" className="dark:data-[state=active]:bg-zinc-900 data-[state=active]:bg-zinc-100">Additional</TabsTrigger>
              </TabsList>
              <TabsContent value="general" className="p-4">
                <div className="grid grid-cols-2 gap-4 mb-4">
                  <div className="space-y-2">
                    <Label htmlFor="firstName">First Name</Label>
                    <Input id="firstName" autoFocus error={errors.firstName?.message} {...register("firstName")} />
                    {errors.firstName && <p className="text-red-500 text-sm">{errors.firstName.message}</p>}
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="lastName">Last Name</Label>
                    <Input id="lastName" error={errors.lastName?.message} {...register("lastName")}/>
                    {errors.lastName && <p className="text-red-500 text-sm">{errors.lastName.message}</p>}
                  </div>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="dateOfBirth">Date of Birth</Label>
                  <Input id="dateOfBirth" error={errors.dateOfBirth?.message} {...registerWithMask("dateOfBirth", "datetime", {
                      inputFormat: "yyyy-mm-dd",
                    })} />
                  {errors.dateOfBirth && <p className="text-red-500 text-sm">{errors.dateOfBirth.message}</p>}
                </div>
                <div className="space-y-2">
                  <Label htmlFor="email">Email</Label>
                  <Input id="email" type="email" error={errors.email?.message} {...register("email")} />
                  {errors.email && <p className="text-red-500 text-sm">{errors.email.message}</p>}
                </div>
              </TabsContent>
              <TabsContent value="additional" className="p-4">
                <div className="space-y-2">
                  <Label htmlFor="json">Additional Information</Label>
                  <JsonEditor
                    theme={currentTheme === 'dark' ? 'githubDark' : 'githubLight'}
                    data={jsonData}
                    setData={setJsonData}
                  />
                  </div>
                </TabsContent>
              </Tabs>
              <CredenzaFooter>
                <div className="flex gap-2 place-content-end">
                  <Button type="submit">Save</Button>
                  <CredenzaClose asChild>
                    <Button variant="outline">Cancel</Button>
                  </CredenzaClose>
                </div>
              </CredenzaFooter>
            </form>
          </div>
      </CredenzaContent>
    </Credenza>
  )
}


function PlusIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M5 12h14" />
      <path d="M12 5v14" />
    </svg>
  )
}
