/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/2K8codJtRYE
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState, useEffect, useContext } from "react"
import { Dialog, DialogClose, DialogTrigger, DialogContent, DialogHeader, DialogTitle, DialogBody, DialogFooter } from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Label } from "@/components/ui/label"
import { Input } from "@/components/ui/input"
import Link from "next/link"
import { Checkbox } from "@/components/ui/checkbox"
import NoSSR from 'react-no-ssr';
import { ConfigContext } from "@/contexts/config-context"
import { PasswordInput } from "./ui/password-input"

export function SettingsPopup() {
  const config = useContext(ConfigContext);
  let encryptionKey = config?.getLocalConfig('encryptionKey')
  if (!encryptionKey) {
    encryptionKey = generateEncryptionKey();
    config?.setLocalConfig('encryptionKey', encryptionKey);
  }

  function generateEncryptionKey() {
    const key = crypto.getRandomValues(new Uint8Array(32))
    return btoa(String.fromCharCode(...key))
  }
  return (
    <NoSSR>
      <Dialog defaultOpen>
        <DialogTrigger asChild>
          <Button variant="outline" size="icon">
            <SettingsIcon className="w-6 h-6" />
          </Button>
        </DialogTrigger>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle>Settings</DialogTitle>
          </DialogHeader>
          <div className="space-y-4">
            <div className="grid gap-1">
              <Label htmlFor="chatGptApiKey">ChatGPT API Key</Label>
              <Input
                type="text"
                id="chatGptApiKey"
                value={config?.localConfig.chatGptApiKey || ""}
                onChange={(e) => config?.setLocalConfig("chatGptApiKey", e.target.value)}
              />
              <Link href="https://help.openai.com/en/articles/4936850-where-do-i-find-my-openai-api-key" target="_blank" className="text-sm text-blue-500 hover:underline" prefetch={false}>
                How to obtain ChatGPT API Key
              </Link>
            </div>
            <div className="grid gap-1">
              <Label htmlFor="encryptionKey">Encryption Key</Label>
              <PasswordInput  autoComplete="true" id="encryptionKey" value={encryptionKey} 
              onChange={(e) => config?.setLocalConfig("encryptionKey", e.target.value)} />
              <p className="text-sm text-gray-500 dark:text-gray-400">
                Please save or print this master key as after losing it your medical records won't be possible to recover.
                We're using strong end-to-end encryption.
              </p>
            </div>
          </div>
          <DialogFooter>
            <div className="flex items-center justify-between gap-4">
              <div className="flex items-center gap-2">
                <Checkbox
                  id="saveToLocalStorage"
                  checked={config?.localConfig.saveToLocalStorage}
                  onCheckedChange={(checked) => config?.setSaveToLocalStorage(checked)}
                />
                <Label htmlFor="saveToLocalStorage">Save to localStorage</Label>
              </div>
              <div className="flex gap-2">
                <DialogClose asChild>
                  <Button type="submit">OK</Button>
                </DialogClose>
                </div>
            </div>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </NoSSR>
  )
}

function SettingsIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z" />
      <circle cx="12" cy="12" r="3" />
    </svg>
  )
}